// <auto-generated />
using System;
using GroupProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GroupProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdminEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CauseOfDeathEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CauseOfDeath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CausesOfDeath");
                });

            modelBuilder.Entity("ComposerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CauseOfDeathId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexyQuotientTotalVotes")
                        .HasColumnType("int");

                    b.Property<int?>("SexyQuotientUpVotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CauseOfDeathId");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("CompositionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComposerId")
                        .HasColumnType("int");

                    b.Property<int>("DitterDorfs")
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("OpusNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("InstrumentationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompositionId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompositionId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Instrumentations");
                });

            modelBuilder.Entity("InstrumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("PeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("ComposerEntity", b =>
                {
                    b.HasOne("CauseOfDeathEntity", "CauseOfDeath")
                        .WithMany("Composers")
                        .HasForeignKey("CauseOfDeathId");

                    b.Navigation("CauseOfDeath");
                });

            modelBuilder.Entity("CompositionEntity", b =>
                {
                    b.HasOne("ComposerEntity", "Composer")
                        .WithMany("Compositions")
                        .HasForeignKey("ComposerId");

                    b.HasOne("GenreEntity", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("PeriodEntity", "Period")
                        .WithMany("Compositions")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Composer");

                    b.Navigation("Genre");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("InstrumentationEntity", b =>
                {
                    b.HasOne("CompositionEntity", "Composition")
                        .WithMany("Instrumentations")
                        .HasForeignKey("CompositionId");

                    b.HasOne("InstrumentEntity", "Instrument")
                        .WithMany("instrumentations")
                        .HasForeignKey("InstrumentId");

                    b.Navigation("Composition");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("CauseOfDeathEntity", b =>
                {
                    b.Navigation("Composers");
                });

            modelBuilder.Entity("ComposerEntity", b =>
                {
                    b.Navigation("Compositions");
                });

            modelBuilder.Entity("CompositionEntity", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("InstrumentEntity", b =>
                {
                    b.Navigation("instrumentations");
                });

            modelBuilder.Entity("PeriodEntity", b =>
                {
                    b.Navigation("Compositions");
                });
#pragma warning restore 612, 618
        }
    }
}
